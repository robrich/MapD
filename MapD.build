<?xml version="1.0"?>
<project name="Build" default="Build" basedir="." xmlns="http://nant.sf.net/release/0.85/nant.xsd">

	<!-- Global varialbes and defaults -->
	<property name="Solution" value="MapD.sln" />
	<property name="Platform" value="Any CPU" />

	<property name="Configuration" value="Release" overwrite="false" />
	<property name="Debug" value="false" />
	<property name="DebugConditional" value="" />
	<property name="FrameworkConditional" value="" />
	<property name="MSBuildXmlLoggerPath" value="C:\ci\CruiseControl.NET\server\ThoughtWorks.CruiseControl.MsBuild.dll" />


	<target name="Build_Release" depends="Release,CleanAndRevert,Build,NuPack" />
	<target name="CleanAndRevert" depends="Clean,SvnRevert,CleanUnversioned" />


	<!-- Select the configuration: Debug or Release -->
	<target name="Debug">
		<property name="Debug" value="true" />
		<property name="Configuration" value="Debug" />
		<property name="DebugConditional" value="DEBUG;TRACE;" />
	</target>

	<target name="Release">
		<property name="Debug" value="false" />
		<property name="Configuration" value="Release" />
		<property name="DebugConditional" value="" />
	</target>


	<!-- Libs -->

	<target name="replacestring">
		<!-- Pass in ${filename}, ${content-from}, ${content-to} (literal strings, not regexes -->
		<!-- echo message="In ${filename} changing from '${content-from}' to '${content-to}'" /-->

		<loadfile file="${filename}" property="filecontents">
			<filterchain>
				<replacestring from="${content-from}" to="${content-to}" ignorecase="true" />
			</filterchain>
		</loadfile>
		<echo file="${filename}" message="${string::trim-end(filecontents)}"/>
	</target>

	<script language="CSHARP" prefix="regex" >
		<code>
			<![CDATA[
			[Function("replace")]
			public static string Replace( string Input, string Pattern, string Replace ) {
				return Regex.Replace( Input, Pattern, Regex.Unescape(Replace), System.Text.RegularExpressions.RegexOptions.Multiline );
			}
			]]>
		</code>
	</script>


	<!-- Clean target will delete the current version -->
	<target name="Clean"
		description="remove generated files">
		<delete failonerror="false">
			<fileset basedir=".">
				<include name="*.log" />
				<include name="*results.xml" /><!-- NUnit results -->
				<include name="*msbuild.xml" /><!-- MSBuild results -->
				<include name="build/**" />
				<include name="log/**" />
				<include name="*.tmp" />
				<include name="**/*.nupkg" />
				<include name="MapDLib.NuGet*/lib/**" />
			</fileset>
		</delete>
		<delete dir="build" if="${directory::exists('build')}" />
		<delete dir="log" if="${directory::exists('log')}" />
		<call target="CleanStep" />
	</target>
	<target name="CleanStep"
		description="remove generated files in anticipation of another build">
		<delete failonerror="false">
			<fileset basedir=".">
				<include name="**/bin/**" />
				<include name="**/obj/**" />
				<include name="**/Debug/**" />
				<include name="**/Release/**" />
				<include name="**/*.tmp_*" />
				<include name="**/*.cache" />
			</fileset>
		</delete>
	</target>

	<target name="SvnRevert">
		<exec program="svn.exe" failonerror="true">
			<arg value="revert" />
			<arg value="-R" />
			<arg value="." />
		</exec>
	</target>

	<target name="CleanUnversioned">
		<!-- A bunch of mayhem because exec can't output to a variable -->
		<exec program="svn.exe" workingdir="${project::get-base-directory()}" output="unversioned.log" failonerror="true">
			<arg value="status" />
			<arg value="--xml" />
			<arg value="--no-ignore" />
		</exec>
		<xmllist file="unversioned.log" property="DeleteList" delim=";" 
			xpath="/status/target/entry[wc-status/@item='unversioned' or wc-status/@item='ignored']/@path" />
		<echo message="Unversioned items to delete: ${DeleteList}" />
		<delete file="unversioned.log" />
		<foreach item="String" in="${DeleteList}" delim=";" property="DeleteItem">
			<delete dir="${DeleteItem}" if="${directory::exists(DeleteItem)}" />
			<delete file="${DeleteItem}" if="${file::exists(DeleteItem)}" />
		</foreach>
	</target>


	<!-- Get the current SVN version -->
	<target name="GetVersion" description="Get the version from svn">

		<!-- A bunch of mayhem because exec can't output to a variable -->
		<exec program="svn.exe" workingdir="${project::get-base-directory()}" output="version.log" failonerror="true">
			<arg value="info" />
			<arg value="--xml" />
		</exec>
		<xmlpeek file="version.log"
				 property="svn-version"
				 xpath="/info/entry/commit/@revision" />
		<delete file="version.log" />

		<echo>Current version from Subversion is ${svn-version}</echo>
	</target>

	<target name="SetVersion" depends="GetVersion,RevertVersion">

		<!-- This isn't a regular expression, this is a hard-coded major/minor: -->
		<property name="content-from" value=".*&quot;" />
		<property name="content-to" value=".${svn-version}&quot;" />

		<echo message="Changing from ${content-from} to ${content-to} in AssemblyInfo files" />

		<foreach item="File" property="file">
			<in>
				<items refid="AssemblyInfos" />
			</in>
			<do>

				<loadfile file="${file}" property="filecontents">
					<filterchain>
						<replacestring from="${content-from}" to="${content-to}" ignorecase="true" />
					</filterchain>
				</loadfile>
				<echo file="${file}" message="${string::trim-end(filecontents)}"/>
			</do>
		</foreach>

	</target>

	<target name="RevertVersion" descripiton="Put the files back so svn can change it next time">

		<fileset id="AssemblyInfos" basedir=".">
			<exclude name="**/-*-/**/AssemblyInfo.cs" />
			<include name="**/AssemblyInfo.cs" />
		</fileset>

		<foreach item="File" property="file">
			<in>
				<items refid="AssemblyInfos" />
			</in>
			<do>
				<exec program="svn.exe" failonerror="true">
					<arg value="revert" />
					<arg value="${file}" />
				</exec>
			</do>
		</foreach>

	</target>


	<target name="Build"
		depends="Clean,SetVersion,BuildAndTestSolutions" />


	<target name="BuildAndTestSolutions">

		<property name="nant.settings.currentframework" value="net-3.5" />
		<property name="FrameworkConditional" value="" />

		<call target="RevertProjectVersion" />

		<call target="BuildAndTestSolution" />

		<property name="nant.settings.currentframework" value="net-4.0" />
		<property name="FrameworkConditional" value="NET_4" />

		<call target="SetProjectVersion" />

		<call target="BuildAndTestSolution" />

		<call target="RevertProjectVersion" />

	</target>

	<target name="RevertProjectVersion">

		<fileset id="Csprojs" basedir=".">
			<exclude name="**/-*-/**/*.csproj" />
			<include name="**/*.csproj" />
		</fileset>
		<foreach item="File" property="file">
			<in>
				<items refid="Csprojs" />
			</in>
			<do>
				<exec program="svn.exe" failonerror="true">
					<arg value="revert" />
					<arg value="${file}" />
				</exec>
			</do>
		</foreach>

	</target>
	<target name="SetProjectVersion">

		<!-- This isn't a regular expression, this is a hard-coded string -->
		<property name="content-from" value="TargetFrameworkVersion&gt;v3.5&lt;/TargetFrameworkVersion" />
		<property name="content-to" value="TargetFrameworkVersion&gt;v4.0&lt;/TargetFrameworkVersion" />

		<echo message="Changing from ${content-from} to ${content-to} in csproj files" />

		<fileset id="Csprojs" basedir=".">
			<exclude name="**/-*-/**/*.csproj" />
			<include name="**/*.csproj" />
		</fileset>
		<foreach item="File" property="file">
			<in>
				<items refid="Csprojs" />
			</in>
			<do>
				<loadfile file="${file}" property="filecontents">
					<filterchain>
						<replacestring from="${content-from}" to="${content-to}" ignorecase="true" />
					</filterchain>
				</loadfile>
				<echo file="${file}" message="${string::trim-end(filecontents)}"/>
			</do>
		</foreach>


		<!-- This isn't a regular expression, this is a hard-coded string -->
		<property name="content-from" value="&lt;Reference Include=&quot;System&quot; /&gt;" />
		<property name="content-to" value="&lt;Reference Include=&quot;System&quot; /&gt;&lt;Reference Include=&quot;System.ComponentModel.DataAnnotations&quot; /&gt;" />

		<echo message="Changing from ${content-from} to ${content-to} in csproj files" />

		<foreach item="File" property="file">
			<in>
				<items refid="Csprojs" />
			</in>
			<do>
				<loadfile file="${file}" property="filecontents">
					<filterchain>
						<replacestring from="${content-from}" to="${content-to}" ignorecase="true" />
					</filterchain>
				</loadfile>
				<echo file="${file}" message="${string::trim-end(filecontents)}"/>
			</do>
		</foreach>

	</target>

	<target name="BuildAndTestSolution" description="Compiles 1 solution">

		<property name="PlatformNoSpace" value="${string::replace(Platform,' ','')}" />
		<property name="FrameworkNoSpace" value="${string::replace(string::replace(nant.settings.currentframework,'net-','net'),'.','')}" />
		<property name="SolutionName" value="${string::replace(path::get-file-name(Solution),'.sln','')}" />

		<call target="CleanStep" />
		<call target="CompileSolution" />

		<call target="NUnit" />

		<property name="Project" value="MapDLib/MapD.csproj" />
		<call target="CopyProject" />

		<zip zipfile="build/MapD-${FrameworkNoSpace}.zip">
			<fileset basedir="build/${FrameworkNoSpace}">
				<include name="**/**" />
			</fileset>
		</zip>


	</target>

	<target name="CompileSolution" description="Compiles 1 solution using msbuild">

		<property name="MSBuildLogger" value="" />
		<property name="MSBuildConsoleLogger" value="" />
		<if test="${file::exists(MSBuildXmlLoggerPath)}">
			<property name="MSBuildLogger" value="/l:ThoughtWorks.CruiseControl.MsBuild.XmlLogger,${MSBuildXmlLoggerPath};log\${SolutionName}-${FrameworkNoSpace}-${PlatformNoSpace}-msbuild.xml" />
			<property name="MSBuildConsoleLogger" value="/noconsolelogger" />
			<mkdir dir="log" if="${not(directory::exists('log'))}" />
			<echo message="MSBuildLogger: ${MSBuildLogger}" />
		</if>

		<echo message="Building ${SolutionName} for ${Platform}: ${FrameworkNoSpace} ${Configuration} ${DebugConditional}${FrameworkConditional}"/>
		<msbuild
			project="${Solution}"
			verbosity="Normal"
			failonerror="true">
			<property name="Configuration" value="${Configuration}" />
			<property name="Platform" value="${Platform}" />
			<property name="debug" value="${Debug}" />
			<property name="trace" value="${Debug}" />
			<arg value='/p:DefineConstants="${DebugConditional}${FrameworkConditional}"' />
			<arg value='${MSBuildLogger}' />
			<arg value='${MSBuildConsoleLogger}' />
		</msbuild>
	</target>

	<target name="NUnit">
		<exec program="nunit-console.exe" failonerror="true" workingdir="MapDLib.Tests/bin/${Configuration}/">
			<arg value="/nodots" />
			<!--arg value="/nologo" /-->
			<arg value="/xml:${project::get-base-directory()}\log\${SolutionName}-${FrameworkNoSpace}-${PlatformNoSpace}-nunit.xml" />
			<arg value="/framework:${nant.settings.currentframework}" />
			<arg value="MapD.Tests.dll" />
		</exec>
	</target>

 	<target name="CopyProject" description="Copy a project">

		<property name="ProjectPath" value="${path::get-directory-name(Project)}"/>
		<property name="ProjectName" value="${path::get-file-name(ProjectPath)}"/>

		<property name="Dest" value="build/${FrameworkNoSpace}"/>

 		<echo message="Copy ${ProjectName} from [${ProjectPath}] to [${Dest}]"/>

		<!-- Copy app -->
		<property name="PathShim" value="/bin/${Configuration}" />
		<copy todir="${Dest}" includeemptydirs="true" overwrite="true">
			<fileset basedir="${ProjectPath}${PathShim}">
				<exclude name="**/*.pdb" if="${Debug != 'true'}" />
				<include name="**/*.pdb" if="${Debug == 'true'}" />
				<include name="**/**" />
			</fileset>
		</copy>

	</target>

	<target name="NuPack" depends="GetVersion,Build" 
		description="Package MapD as a NuGet package">
	
		<copy	file="build/net40/MapD.dll"
			todir="MapDLib.NuGet/lib/net40"
			overwrite="true" />
		<copy	file="build/net35/MapD.dll"
			todir="MapDLib.NuGet/lib/net20"
			overwrite="true" />

		<!-- This isn't a regular expression: -->
		<property name="content-from" value=".*&lt;" />
		<property name="content-to" value=".${svn-version}&lt;" />
		
		<property name="file" value="MapDLib.NuGet/Package.nuspec" />

		<loadfile file="${file}" property="filecontents">
			<filterchain>
				<replacestring from="${content-from}" to="${content-to}" ignorecase="true" />
			</filterchain>
		</loadfile>
		<echo file="${file}" message="${string::trim-end(filecontents)}"/>

		<exec program="nuget" failonerror="true">
			<arg value="pack" />
			<arg value="MapDLib.NuGet\Package.nuspec" />
			<arg value="-OutputDirectory" />
			<arg value="build" />
		</exec>
		
		<!--
		<copy todir="build" overwrite="true">
			<fileset basedir="MapDLib.NuGet">
				<include name="*.nupkg" />
			</fileset>
		</copy>
		-->

	</target>

</project>
