<?xml version="1.0"?>
<project name="Build" default="Build" basedir="." xmlns="http://nant.sf.net/release/0.85/nant.xsd">

	<!-- Global varialbes and defaults -->
	<property name="Solution" value="src/MapD.sln" />
	<property name="Platform" value="Any CPU" />

	<property name="Configuration" value="Release" overwrite="false" />
	<property name="Debug" value="false" />
	<property name="DebugConditional" value="" />
	<property name="FrameworkConditional" value="" />
	<property name="MSBuildVerbosity" value="Minimal" overwrite="false" />


	<target name="Build_Release" depends="Release,CleanAndRevert,Build,NuPack" />
	<target name="CleanAndRevert" depends="Clean,CleanVersioned,CleanUnversioned" />


	<!-- Select the configuration: Debug or Release -->
	<target name="Debug">
		<property name="Debug" value="true" />
		<property name="Configuration" value="Debug" />
		<property name="DebugConditional" value="DEBUG;TRACE;" />
	</target>

	<target name="Release">
		<property name="Debug" value="false" />
		<property name="Configuration" value="Release" />
		<property name="DebugConditional" value="" />
	</target>


	<!-- Libs -->

	<fileset id="AssemblyInfos" basedir=".">
		<exclude name="**/-*-/**/AssemblyInfo.cs" />
		<include name="**/AssemblyInfo.cs" />
		<include name="GlobalAssemblyInfo.cs" />
	</fileset>

	<target name="replacestring">
		<!-- Pass in ${filename}, ${content-from}, ${content-to} (literal strings, not regexes -->
		<!-- echo message="In ${filename} changing from '${content-from}' to '${content-to}'" /-->

		<loadfile file="${filename}" property="filecontents">
			<filterchain>
				<replacestring from="${content-from}" to="${content-to}" ignorecase="true" />
			</filterchain>
		</loadfile>
		<echo file="${filename}" message="${string::trim-end(filecontents)}"/>
	</target>


	<!-- Clean target will delete the current version -->
	<target name="Clean"
		description="remove generated files">
		<delete failonerror="false">
			<fileset basedir=".">
				<exclude name="src/packages" />
				<include name="build/**" />
				<include name="log/**" />
				<include name="tmp/**" />
				<include name="**/*.nupkg" />
				<include name="src/MapDLib.*NuGet/lib/**" />
			</fileset>
		</delete>
		<delete dir="build" if="${directory::exists('build')}" />
		<delete dir="log" if="${directory::exists('log')}" />
		<delete dir="tmp" if="${directory::exists('tmp')}" />
		<call target="CleanStep" />
	</target>
	<target name="CleanStep"
		description="remove generated files in anticipation of another build">
		<delete failonerror="false">
			<fileset basedir=".">
				<include name="**/bin/**" />
				<include name="**/obj/**" />
				<include name="**/Debug/**" />
				<include name="**/Release/**" />
				<include name="**/*.tmp_*" />
				<include name="**/*.cache" />
			</fileset>
		</delete>
	</target>

	<target name="CleanVersioned">
		<if test="${directory::exists('.svn')}">
			<exec program="svn.exe" failonerror="true">
				<arg value="revert" />
				<arg value="-R" />
				<arg value="." />
			</exec>
		</if>
		<if test="${directory::exists('.hg')}">
			<exec program="hg.exe" failonerror="true">
				<arg value="revert" />
				<arg value="--all" />
				<arg value="--no-backup" />
			</exec>
		</if>
		<if test="${directory::exists('.git')}">
			<exec program="git.exe" failonerror="false">
				<arg value="reset" />
				<arg value="--hard" />
			</exec>
		</if>
	</target>

	<target name="CleanUnversioned">
		<if test="${directory::exists('.svn')}">
			<!-- A bunch of mayhem because exec can't output to a variable -->
			<exec program="svn.exe" workingdir="${project::get-base-directory()}" output="unversioned.log" failonerror="true">
				<arg value="status" />
				<arg value="--xml" />
				<arg value="--no-ignore" />
			</exec>
			<xmllist file="unversioned.log" property="DeleteList" delim=";" 
				xpath="/status/target/entry[wc-status/@item='unversioned' or wc-status/@item='ignored']/@path" />
			<echo message="Unversioned items to delete: ${DeleteList}" />
			<delete file="unversioned.log" />
			<foreach item="String" in="${DeleteList}" delim=";" property="DeleteItem">
				<delete dir="${DeleteItem}" if="${directory::exists(DeleteItem)}" />
				<delete file="${DeleteItem}" if="${file::exists(DeleteItem)}" />
			</foreach>
		</if>
		<if test="${directory::exists('.hg')}">
			<!-- uses purge extension -->
			<exec program="hg.exe" failonerror="true">
				<arg value="purge" />
				<arg value="--all" />
			</exec>
		</if>
		<if test="${directory::exists('.git')}">
			<exec program="git.exe" failonerror="false">
				<arg value="clean" />
				<arg value="--force" />
				<arg value="-x" /><!-- including content ignored by .gitignore -->
			</exec>
		</if>
	</target>


	<!-- Get the current version -->
	<target name="GetVersion">
		<mkdir dir="log" if="${not(directory::exists('log'))}" />

		<if test="${directory::exists('.svn')}">
			<!-- A bunch of mayhem because exec can't output to a variable -->
			<exec program="svn.exe" workingdir="${project::get-base-directory()}" output="log/version.log" failonerror="true">
				<arg value="info" />
				<arg value="--xml" />
			</exec>
			<xmlpeek file="log/version.log"
					 property="version-id"
					 xpath="/info/entry/commit/@revision" />
			<property name="version-name" value="svn-${version-id}" />

			<echo>Current version from Subversion is ${version-id}</echo>
		</if>

		<if test="${directory::exists('.hg')}">
			<!-- A bunch of mayhem because exec can't output to a variable -->
			<exec program="hg.exe" workingdir="${project::get-base-directory()}" output="log/version.log" failonerror="true">
				<arg value="log" />
				<arg value="--limit=1" />
				<arg value="--style=xml" />
			</exec>
			<xmlpeek file="log/version.log"
					 property="version-id"
					 xpath="/log/logentry/@revision" />
			<xmlpeek file="log/version.log"
					 property="version-name"
					 xpath="/log/logentry/@node" />

			<echo>Current version from Mercurial is ${version-id}, node is ${version-name}</echo>
		</if>

		<if test="${directory::exists('.git')}">
			<!-- A bunch of mayhem because exec can't output to a variable -->
			<exec program="git.exe" output="log/version.log" failonerror="false">
				<arg value="log" />
				<arg value="-1" />
				<arg value="--format=%h" /><!-- %H is full hash, %h is short hash -->
			</exec>
			<loadfile file="log/version.log" property="version-name" />

			<![CDATA[-- in git, version-id could be '# of commits' from "git log --format=%h | wc -l | sed 's/ //g'" but it doesn't seem that helpful --]]>
			<property name="version-id" value="*" />

			<echo>Current version from Git is ${version-id}, node is ${version-name}</echo>
		</if>

		<property name="version-name" value="${string::trim(version-name)}" />
		<fail if="${version-id==''}" message="Can't determine version id" />
		<fail if="${version-name==''}" message="Can't determine version name" />
	</target>

	<target name="SetVersion" depends="GetVersion,RevertVersion">

		<!-- This isn't a regular expression, this is a hard-coded major/minor: -->
		<property name="version-id-from" value=".*&quot;" />
		<property name="version-id-to" value=".${version-id}&quot;" />
		<property name="version-name-from" value="AssemblyDescription&#40; &quot;&quot;" />
		<property name="version-name-to" value="AssemblyDescription&#40; &quot;${version-name}&quot;" />

		<echo message="Changing from ${version-id-from} to ${version-id-to} and ${version-name-from} to ${version-name-to} in AssemblyInfo files" />

		<foreach item="File" property="file">
			<in>
				<items refid="AssemblyInfos" />
			</in>
			<do>
				<loadfile file="${file}" property="filecontents">
					<filterchain>
						<replacestring from="${version-id-from}" to="${version-id-to}" ignorecase="true" />
						<replacestring from="${version-name-from}" to="${version-name-to}" ignorecase="true" />
					</filterchain>
				</loadfile>
				<echo file="${file}" message="${filecontents}"/>
			</do>
		</foreach>

	</target>

	<target name="RevertVersion" descripiton="Put the files back so next build can change it">

		<foreach item="File" property="file">
			<in>
				<items refid="AssemblyInfos" />
			</in>
			<do>
				<if test="${directory::exists('.svn')}">
					<exec program="svn.exe" failonerror="true">
						<arg value="revert" />
						<arg value="${file}" />
					</exec>
				</if>
				<if test="${directory::exists('.hg')}">
					<exec program="hg.exe" failonerror="true">
						<arg value="revert" />
						<arg value="--no-backup" />
						<arg value="${file}" />
					</exec>
				</if>
				<if test="${directory::exists('.git')}">
					<exec program="git.exe" failonerror="false">
						<arg value="checkout" />
						<arg value="${file}" />
					</exec>
				</if>
			</do>
		</foreach>

	</target>


	<target name="Build"
		depends="Clean,SetVersion,BuildAndTestSolutions" />


	<target name="BuildAndTestSolutions">

		<property name="nant.settings.currentframework" value="net-3.5" />
		<property name="FrameworkConditional" value="" />

		<call target="RevertProjectVersion" />

		<call target="BuildAndTestSolution" />

		<property name="nant.settings.currentframework" value="net-4.0" />
		<property name="FrameworkConditional" value="NET_4" />

		<call target="SetProjectVersion" />

		<call target="BuildAndTestSolution" />

		<call target="RevertProjectVersion" />

	</target>

	<target name="RevertProjectVersion">

		<fileset id="Csprojs" basedir=".">
			<exclude name="**/-*-/**/*.csproj" />
			<include name="**/*.csproj" />
		</fileset>
		<foreach item="File" property="file">
			<in>
				<items refid="Csprojs" />
			</in>
			<do>
				<if test="${directory::exists('.svn')}">
					<exec program="svn.exe" failonerror="true">
						<arg value="revert" />
						<arg value="${file}" />
					</exec>
				</if>
				<if test="${directory::exists('.hg')}">
					<exec program="hg.exe" failonerror="true">
						<arg value="revert" />
						<arg value="--no-backup" />
						<arg value="${file}" />
					</exec>
				</if>
				<if test="${directory::exists('.git')}">
					<exec program="git.exe" failonerror="false">
						<arg value="checkout" />
						<arg value="${file}" />
					</exec>
				</if>
			</do>
		</foreach>

	</target>
	<target name="SetProjectVersion">

		<!-- This isn't a regular expression, this is a hard-coded string -->
		<property name="content-from" value="TargetFrameworkVersion&gt;v3.5&lt;/TargetFrameworkVersion" />
		<property name="content-to" value="TargetFrameworkVersion&gt;v4.0&lt;/TargetFrameworkVersion" />

		<echo message="Changing from ${content-from} to ${content-to} in csproj files" />

		<fileset id="Csprojs" basedir=".">
			<exclude name="**/-*-/**/*.csproj" />
			<include name="**/*.csproj" />
		</fileset>
		<foreach item="File" property="file">
			<in>
				<items refid="Csprojs" />
			</in>
			<do>
				<loadfile file="${file}" property="filecontents">
					<filterchain>
						<replacestring from="${content-from}" to="${content-to}" ignorecase="true" />
					</filterchain>
				</loadfile>
				<echo file="${file}" message="${string::trim-end(filecontents)}"/>
			</do>
		</foreach>


		<!-- This isn't a regular expression, this is a hard-coded string -->
		<property name="content-from" value="&lt;Reference Include=&quot;System&quot; /&gt;" />
		<property name="content-to" value="&lt;Reference Include=&quot;System&quot; /&gt;&lt;Reference Include=&quot;System.ComponentModel.DataAnnotations&quot; /&gt;" />

		<echo message="Changing from ${content-from} to ${content-to} in csproj files" />

		<foreach item="File" property="file">
			<in>
				<items refid="Csprojs" />
			</in>
			<do>
				<loadfile file="${file}" property="filecontents">
					<filterchain>
						<replacestring from="${content-from}" to="${content-to}" ignorecase="true" />
					</filterchain>
				</loadfile>
				<echo file="${file}" message="${string::trim-end(filecontents)}"/>
			</do>
		</foreach>

	</target>

	<target name="BuildAndTestSolution" description="Compiles 1 solution">

		<property name="PlatformNoSpace" value="${string::replace(Platform,' ','')}" />
		<property name="FrameworkNoSpace" value="${string::replace(string::replace(nant.settings.currentframework,'net-','net'),'.','')}" />
		<property name="SolutionName" value="${string::replace(path::get-file-name(Solution),'.sln','')}" />

		<call target="CleanStep" />
		<call target="CompileSolution" />

		<call target="NUnit" />

		<property name="Project" value="src/MapDLib/MapD.csproj" />
		<call target="CopyProject" />

		<zip zipfile="build/MapD-${FrameworkNoSpace}.zip">
			<fileset basedir="build/${FrameworkNoSpace}">
				<include name="**/**" />
			</fileset>
		</zip>


	</target>

	<target name="CompileSolution" description="Compiles 1 solution using msbuild">

		<echo message="Building ${SolutionName} for ${Platform}: ${FrameworkNoSpace} ${Configuration} ${DebugConditional}${FrameworkConditional}"/>
		<msbuild
			project="${Solution}"
			verbosity="${MSBuildVerbosity}"
			failonerror="true">
			<property name="Configuration" value="${Configuration}" />
			<property name="Platform" value="${Platform}" />
			<property name="debug" value="${Debug}" />
			<property name="trace" value="${Debug}" />
			<arg value='/m' />
			<arg value='/p:DefineConstants="${DebugConditional}${FrameworkConditional}"' />
		</msbuild>
	</target>

	<target name="NUnit">
		<mkdir dir="log" if="${not(directory::exists('log'))}" />
		<exec program="nunit-console.exe" failonerror="true" workingdir="src/MapDLib.Tests/bin/${Configuration}/">
			<arg value="/nodots" />
			<!--arg value="/nologo" /-->
			<arg value="/xml:${project::get-base-directory()}\log\${SolutionName}-${FrameworkNoSpace}-${PlatformNoSpace}-nunit.xml" />
			<arg value="/framework:${nant.settings.currentframework}" />
			<arg value="MapD.Tests.dll" />
		</exec>
	</target>

 	<target name="CopyProject" description="Copy a project">

		<property name="ProjectPath" value="${path::get-directory-name(Project)}"/>
		<property name="ProjectName" value="${path::get-file-name(ProjectPath)}"/>

		<property name="Dest" value="build/${FrameworkNoSpace}"/>

 		<echo message="Copy ${ProjectName} from [${ProjectPath}] to [${Dest}]"/>

		<!-- Copy app -->
		<property name="PathShim" value="/bin/${Configuration}" />
		<copy todir="${Dest}" includeemptydirs="true" overwrite="true">
			<fileset basedir="${ProjectPath}${PathShim}">
				<exclude name="**/*.pdb" if="${Debug != 'true'}" />
				<include name="**/*.pdb" if="${Debug == 'true'}" />
				<include name="**/**" />
			</fileset>
		</copy>

	</target>
	
	<target name="NuPack" depends="GetVersion,Build,NuPackGetVersion,NuPackMapD,NuPackMapDMVC" />

	<target name="NuPackGetVersion" if="${property::exists('version-id')==false or version-id=='' or version-id=='*'}">
		<property name="version-id" value="${version::get-build(assemblyname::get-version(assemblyname::get-assembly-name('build/net40/MapD.dll')))}" />
		<echo message="build/net40/MapD.dll has version ${version-id}" />
	</target>

	<target name="NuPackMapD">
	
		<copy	file="build/net40/MapD.dll"
			todir="src/MapDLib.NuGet/lib/net40"
			overwrite="true" />
		<copy	file="build/net35/MapD.dll"
			todir="src/MapDLib.NuGet/lib/net20"
			overwrite="true" />

		<!-- This isn't a regular expression: -->
		<property name="content-from" value=".*&lt;" />
		<property name="content-to" value=".${version-id}&lt;" />
		
		<property name="file" value="src/MapDLib.NuGet/Package.nuspec" />

		<loadfile file="${file}" property="filecontents">
			<filterchain>
				<replacestring from="${content-from}" to="${content-to}" ignorecase="true" />
			</filterchain>
		</loadfile>
		<echo file="${file}" message="${string::trim-end(filecontents)}"/>

		<exec program="nuget" failonerror="true">
			<arg value="pack" />
			<arg value="src\MapDLib.NuGet\Package.nuspec" />
			<arg value="-OutputDirectory" />
			<arg value="build" />
		</exec>
		
	</target>
	
	<target name="NuPackMapDMVC">

		<!-- This isn't a regular expression: -->
		<property name="content-from" value=".*&lt;" />
		<property name="content-to" value=".${version-id}&lt;" />
		
		<property name="file" value="src/MapDLib.MVC.NuGet/Package.nuspec" />

		<loadfile file="${file}" property="filecontents">
			<filterchain>
				<replacestring from="${content-from}" to="${content-to}" ignorecase="true" />
			</filterchain>
		</loadfile>
		<echo file="${file}" message="${string::trim-end(filecontents)}"/>

		<exec program="nuget" failonerror="true">
			<arg value="pack" />
			<arg value="src\MapDLib.MVC.NuGet\Package.nuspec" />
			<arg value="-OutputDirectory" />
			<arg value="build" />
		</exec>
		
	</target>

</project>
